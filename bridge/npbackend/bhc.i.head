%module bhc
%{
#include<bhc.h>
%}

%typemap(in) bh_bool const {
    if(PyObject_IsTrue($input))
        $1 = 1;
    else
        $1 = 0;
}
%typemap(in) uint64_t {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsUnsignedLongMask($input);
    %#else
        $1 = PyInt_AsUnsignedLongMask($input);
    %#endif
}
%typemap(in) bh_int8 const {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_int16 const {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_int32 const {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_int64 const {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_uint8 const {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_uint16 const {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_uint32 const {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_uint64 const {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_float64 const {
    $1 = PyFloat_AsDouble($input);
}
%typemap(in) bh_float32 const {
    $1 = PyFloat_AsDouble($input);
}
%typemap(in) bh_complex64 const {
    $1.real = PyComplex_RealAsDouble($input);
    $1.imag = PyComplex_ImagAsDouble($input);
}
%typemap(in) bh_complex128 const {
    $1.real = PyComplex_RealAsDouble($input);
    $1.imag = PyComplex_ImagAsDouble($input);
}
%typemap(in) bh_bool {
    if(PyObject_IsTrue($input))
        $1 = 1;
    else
        $1 = 0;
}
%typemap(in) bh_int8 {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_int16 {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_int32 {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_int64 {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_uint8 {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_uint16 {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_uint32 {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_uint64 {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) bh_float64 {
    $1 = PyFloat_AsDouble($input);
}
%typemap(in) bh_float32 {
    $1 = PyFloat_AsDouble($input);
}
%typemap(in) bh_complex64 {
    $1.real = PyComplex_RealAsDouble($input);
    $1.imag = PyComplex_ImagAsDouble($input);
}
%typemap(in) bh_complex128 {
    $1.real = PyComplex_RealAsDouble($input);
    $1.imag = PyComplex_ImagAsDouble($input);
}
%typemap(in) int64_t const {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) int64_t {
    %#if PY_MAJOR_VERSION >= 3
        $1 = PyLong_AsLong($input);
    %#else
        $1 = PyInt_AsLong($input);
    %#endif
}
%typemap(in) int64_t const * (int64_t temp[32]) {
  int i;
  if (!PySequence_Check($input)) {
    PyErr_SetString(PyExc_ValueError,"Expected a sequence");
    return NULL;
  }
  if (PySequence_Length($input) > 32) {
    PyErr_SetString(PyExc_ValueError,"Max list length is 32");
    return NULL;
  }
  for (i = 0; i < PySequence_Length($input); i++) {
    PyObject *o = PySequence_GetItem($input,i);
 %#if PY_MAJOR_VERSION >= 3
    if(PyLong_Check(o))
 %#else
    if(PyInt_Check(o))
 %#endif
    {
        %#if PY_MAJOR_VERSION >= 3
            temp[i] = PyLong_AsLong(o);
        %#else
            temp[i] = PyInt_AsLong(o);
        %#endif
    } else
    {
        PyErr_SetString(PyExc_ValueError,"Sequence elements must be Python integers");
        return NULL;
    }
  }
  $1 = temp;
}
